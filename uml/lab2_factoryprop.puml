@startuml
'https://plantuml.com/class-diagram

abstract class BaseProp
{
    # power:int
    
    + BaseProp(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
    + {abstract} active(AbstractAircraft aircraft):void
}

class BloodProp
{
    + BloodProp(int locationX, int locationY, int speedX, int speedY, int power)
    + active(AbstractAircraft aircraft):void
}

class BombProp
{
    + BombProp(int locationX, int locationY, int speedX, int speedY, int power)
    + active(AbstractAircraft aircraft):void
}

class BulletProp
{
    + BulletProp(int locationX, int locationY, int speedX, int speedY, int power)
    + active(AbstractAircraft aircraft):void
}

interface PropItemFactory {
    + createProp(int x, int y):BaseProp
}

class BloodPropFactory {
    + createProp(int x, int y):BaseProp
}

class BombPropFactory {
    + createProp(int x, int y):BaseProp
}

class BulletPropFactory {
    + createProp(int x, int y):BaseProp
}

class PropGenerator {
    - {static} propFactory:PropItemFactory
    
    + {static} createBloodProp(int x, int y):BaseProp
    + {static} createBombProp(int x, int y):BaseProp
    + {static} createBulletProp(int x, int y):BaseProp
    + {static} createRandomProp(double rand, int x, int y):BaseProp
}

BloodPropFactory ..> BloodProp : 创建
BombPropFactory ..> BombProp : 创建
BulletPropFactory ..> BulletProp : 创建

BaseProp <|-- BloodProp
BaseProp <|-- BombProp
BaseProp <|-- BulletProp

PropItemFactory <|.. BloodPropFactory
PropItemFactory <|.. BombPropFactory
PropItemFactory <|.. BulletPropFactory
PropGenerator ..> PropItemFactory : 创建并管理

PropItemFactory ..> BaseProp : 依赖

@enduml