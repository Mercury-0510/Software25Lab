@startuml factoryprop

interface PropItemFactory {
    + createProp(x, y) : BaseProp
}

class BloodPropFactory {
    + createProp(x, y) : BaseProp
}

class BombPropFactory {
    + createProp(x, y) : BaseProp
}

class BulletPropFactory {
    + createProp(x, y) : BaseProp
}

class BulletPlusPropFactory {
    + createProp(x, y) : BaseProp
}

abstract class BaseProp {
    # power : int
    + {abstract} active(aircraft) : void
}

class BloodProp {
    + active(aircraft) : void
}

class BombProp {
    + active(aircraft) : void
}

class BulletProp {
    + active(aircraft) : void
}

class BulletPlusProp {
    + active(aircraft) : void
}

class PropGenerator {
    - {static} propFactory : PropItemFactory
    + {static} createBloodProp(x, y) : BaseProp
    + {static} createBombProp(x, y) : BaseProp
    + {static} createBulletProp(x, y) : BaseProp
    + {static} createBulletPlusProp(x, y) : BaseProp
}

PropItemFactory <|.. BloodPropFactory
PropItemFactory <|.. BombPropFactory
PropItemFactory <|.. BulletPropFactory
PropItemFactory <|.. BulletPlusPropFactory

PropGenerator --> PropItemFactory : uses

BaseProp <|-- BloodProp
BaseProp <|-- BombProp
BaseProp <|-- BulletProp
BaseProp <|-- BulletPlusProp

BloodPropFactory ..> BloodProp : creates
BombPropFactory ..> BombProp : creates
BulletPropFactory ..> BulletProp : creates
BulletPlusPropFactory ..> BulletPlusProp : creates

@enduml