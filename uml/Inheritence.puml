@startuml Inheritance

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject()
    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}

abstract class AbstractAircraft
{
    # maxHp:int
    # hp:int
    # shootStrategy:ShootStrategy
    
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + setShootStrategy(ShootStrategy shootStrategy):boolean
    + {abstract} shoot():List<BaseBullet>
    + {abstract} getPower():int
    + {abstract} getDirection():int
    + {abstract} getBulletSpeedX():int
    + {abstract} getBulletSpeedY():int
}

class HeroAircraft {
    - {static} instance:HeroAircraft
    - power:int = 30
    - direction:int = -1
    
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance(int locationX, int locationY, int speedX, int speedY, int hp):HeroAircraft
    + {static} getInstance():HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
    + getPower():int
    + getDirection():int
    + getBulletSpeedX():int
    + getBulletSpeedY():int
}

abstract class MobEnemy {
    - score:int
    
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + forward():void
    + getScore():int
}

class NormalEnemy {
    + NormalEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + shoot():List<BaseBullet>
    + getPower():int
    + getDirection():int
    + getBulletSpeedX():int
    + getBulletSpeedY():int
}

class EliteEnemy {
    - power:int = 10
    - direction:int = 1
    
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + shoot():List<BaseBullet>
    + getPower():int
    + getDirection():int
    + getBulletSpeedX():int
    + getBulletSpeedY():int
}

class SuperEnemy {
    - power:int = 10
    - direction:int = 1
    
    + SuperEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + shoot():List<BaseBullet>
    + getPower():int
    + getDirection():int
    + getBulletSpeedX():int
    + getBulletSpeedY():int
}

class Boss {
    - power:int = 10
    - direction:int = 1
    
    + Boss(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + shoot():List<BaseBullet>
    + getPower():int
    + getDirection():int
    + getBulletSpeedX():int
    + getBulletSpeedY():int
}

abstract class BaseBullet
{
    - power:int
    
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
    + getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

abstract class BaseProp
{
    # power:int
    
    + BaseProp(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
    + {abstract} active(AbstractAircraft aircraft):void
}

class BloodProp
{
    + BloodProp(int locationX, int locationY, int speedX, int speedY, int power)
    + active(AbstractAircraft aircraft):void
}

class BombProp
{
    + BombProp(int locationX, int locationY, int speedX, int speedY, int power)
    + active(AbstractAircraft aircraft):void
}

class BulletProp
{
    + BulletProp(int locationX, int locationY, int speedX, int speedY, int power)
    + active(AbstractAircraft aircraft):void
}

class BulletPlusProp
{
    + BulletPlusProp(int locationX, int locationY, int speedX, int speedY, int power)
    + active(AbstractAircraft aircraft):void
}

interface ShootStrategy {
    + shoot(AbstractAircraft aircraft):List<BaseBullet>
    + advance():void
}

class LinearShootStrategy {
    - isHeroBullet:boolean
    
    + LinearShootStrategy(boolean isHeroBullet)
    + shoot(AbstractAircraft aircraft):List<BaseBullet>
    + advance():void
}

class CircularShootStrategy {
    - isHeroBullet:boolean
    - shootNum:int
    
    + CircularShootStrategy(boolean isHeroBullet)
    + shoot(AbstractAircraft aircraft):List<BaseBullet>
    + advance():void
}

class ScatterShootStrategy {
    - isHeroBullet:boolean
    - shootNum:int
    
    + ScatterShootStrategy(boolean isHeroBullet)
    + shoot(AbstractAircraft aircraft):List<BaseBullet>
    + advance():void
}

class NoShootStrategy {
    + NoShootStrategy(boolean isHeroBullet)
    + shoot(AbstractAircraft aircraft):List<BaseBullet>
    + advance():void
}

interface EnemyAircraftFactory {
    + createEnemyAircraft():MobEnemy
}

class NormalEnemyFactory {
    + createEnemyAircraft():MobEnemy
}

class EliteEnemyFactory {
    + createEnemyAircraft():MobEnemy
}

class SuperEnemyFactory {
    + createEnemyAircraft():MobEnemy
}

class BossFactory {
    + createEnemyAircraft():MobEnemy
}

class EnemyGenerator {
    + {static} createNormalEnemy():MobEnemy
    + {static} createEliteEnemy():MobEnemy
    + {static} createSuperEnemy():MobEnemy
    + {static} createBoss():MobEnemy
    + {static} createRandomEnemy():MobEnemy
}

interface PropItemFactory {
    + createProp(int x, int y):BaseProp
}

class BloodPropFactory {
    + createProp(int x, int y):BaseProp
}

class BombPropFactory {
    + createProp(int x, int y):BaseProp
}

class BulletPropFactory {
    + createProp(int x, int y):BaseProp
}

class BulletPlusPropFactory {
    + createProp(int x, int y):BaseProp
}

class PropGenerator {
    + {static} createRandomProp(double rand, int x, int y):BaseProp
}

class Record {
    - name:String
    - score:int
    - time:long
    - ranknum:int
    
    + Record(String name, int score, long time, int ranknum)
    + getName():String
    + setName(String name):void
    + getScore():int
    + setScore(int score):void
    + getTime():long
    + setTime(long time):void
    + getRankNum():int
    + setRankNum(int ranknum):void
    + toString():String
}

interface RankDAO {
    + addRecord(String name, int score):void
    + deleteRecord(int rankNum):void
    + getAllrecord():List<Record>
}

class RankDAOImpl {
    - rank:List<Record>
    - filePath:String
    
    + RankDAOImpl(String filePath)
    + addRecord(String name, int score):void
    + deleteRecord(int rankNum):void
    + getAllrecord():List<Record>
    + showRank():void
    - updateRankNumbers():void
    - saveToFile():void
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy

MobEnemy <|-- NormalEnemy
MobEnemy <|-- EliteEnemy
MobEnemy <|-- SuperEnemy
MobEnemy <|-- Boss

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

BaseProp <|-- BloodProp
BaseProp <|-- BombProp
BaseProp <|-- BulletProp
BaseProp <|-- BulletPlusProp

ShootStrategy <|.. LinearShootStrategy
ShootStrategy <|.. CircularShootStrategy
ShootStrategy <|.. ScatterShootStrategy
ShootStrategy <|.. NoShootStrategy

EnemyAircraftFactory <|.. NormalEnemyFactory
EnemyAircraftFactory <|.. EliteEnemyFactory
EnemyAircraftFactory <|.. SuperEnemyFactory
EnemyAircraftFactory <|.. BossFactory

PropItemFactory <|.. BloodPropFactory
PropItemFactory <|.. BombPropFactory
PropItemFactory <|.. BulletPropFactory
PropItemFactory <|.. BulletPlusPropFactory

RankDAO <|.. RankDAOImpl

AbstractAircraft o--> ShootStrategy
RankDAOImpl o--> Record

EnemyGenerator ..> EnemyAircraftFactory
PropGenerator ..> PropItemFactory

NormalEnemyFactory ..> NormalEnemy
EliteEnemyFactory ..> EliteEnemy
SuperEnemyFactory ..> SuperEnemy
BossFactory ..> Boss

BloodPropFactory ..> BloodProp
BombPropFactory ..> BombProp
BulletPropFactory ..> BulletProp
BulletPlusPropFactory ..> BulletPlusProp

@enduml